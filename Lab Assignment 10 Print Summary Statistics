"""
    Assignment Ten: Print Summary Statistics
    Submitted by Darrin Chang
    Submitted: June 16th, 2024

    Assignment 8: Code is added to creating functions to allow users to choose and convert units of temperature,
              calculating average temperatures based on specified filters, and providing summary statistics.

    Assignment 9: Implementing new instance methods for handling the data and updating
              the menu functionality to read and process large CSV file containing
              temperature readings from a STEM center.

    Assignment 8: Code is added to create a class to manage the temperature data
              in a separate file and then integrated here.

    Assignment 7: This assignment introduces two methods (in detail)
              print_filter() - prints a list of sensors that are active and inactive
              change_filter() - allows a user to activate a sensor or deactivate it
              The change_filter() is initiated through the menu prompt #3 choice.
              The change_filter() method will print the filter list showing active or
              inactive states, and it will allow the user to turn a sensor on or off.

    Assignment 6: Bubble sort a sensor list but using recursion. Use a test case
              as provided (similar to assignment 5, but with reference to the
              sensor list information from assignment 4).

    Assignment 5: A separate recursion assignment (as another project; see assignment 5)

    Assignment 4: Code is added to create a sensor list and filter list

    Assignment 3: Code is added to the program in order to create a menu of functions which the user can choose from

    Assignment 2: Additional code is added to this program in order to convert the user's input from Celsius to Celsius,
    Kelvin, or Fahrenheit

    Assignment 1: This program demonstrates printing lines of text to the screen
"""

import sys

current_unit = 0
UNITS = {
        0: ("Celsius", "C"),
        1: ("Fahrenheit", "F"),
        2: ("Kelvin", "K"),
        }


class TempDataset:
    """
    Class variable to keep track of the number of TempDataset objects created
    """
    _num_objects = 0

    def __init__(self):
        """
        Instance variable to hold the data set
        """
        self._data_set = None
        """
        Instance variable to hold the name of the data set
        """
        self._name = "Unnamed"
        TempDataset._num_objects += 1

    @property
    def name(self):
        return self._name

    current_unit = 0

    @name.setter
    def name(self, new_name):
        if not isinstance(new_name, str) or len(new_name) < 3 or len(new_name) > 20:
            raise ValueError("Name must be a string between 3 and 20 characters.")
        self._name = new_name

    def process_file(self, filename):
        """
        The process_file method reads CSV file, extracts temperature data entries,
        converts the time of day to an integer hour, and stores the processed data in the _data_set attribute, returning
        true if successful or false if file is not found
        """
        import math
        try:
            with open(filename, "r") as file:
                lines = file.readlines()
        except FileNotFoundError:
            return False
        self._data_set = []
        for line in lines:
            data = tuple(line.split(","))
            if len(data) > 4 and data[3] == 'TEMP':
                time_of_day = math.floor(float(data[1]) * 24)
                temperature = data[4].strip()
                new_entry = (int(data[0]), time_of_day, int(data[2]), float(temperature))
                self._data_set.append(new_entry)
        return True

    def get_summary_statistics(self, filter_list):
        """
        Calculates the minimum, maximum, and average temperatures for the filtered dataset.
        """
        if self._data_set is None:
            return None

        filtered_temps = [
            entry[3] for entry in self._data_set
            if entry[2] in filter_list
        ]

        if not filtered_temps:
            return None

        min_temp = min(filtered_temps)
        max_temp = max(filtered_temps)
        avg_temp = sum(filtered_temps) / len(filtered_temps)
        return min_temp, max_temp, avg_temp

    """
    Instance method to get average temperature by day and time (stub implementation)
    """
    def get_avg_temperature_day_time(self, filter_list, day, time):
        if self._data_set is None:
            return None

        filtered_temps = [
            entry[3] for entry in self._data_set
            if entry[0] == day and entry[1] == time and entry[2] in filter_list
        ]

        if not filtered_temps:
            return None
        avg_temp = sum(filtered_temps) / len(filtered_temps)
        return avg_temp

    """
    Instance method to get the number of temperature samples (stub implementation)
    """
    def get_num_temps(self, filter_list, lower_bound, upper_bound):
        if self._data_set is None:
            return None
        return 0

    def get_loaded_temps(self):
        """
        Returns the number of loaded temperature samples as an integer if the data set is loaded
        """
        if self._data_set is None:
            return None
        else:
            return int(len(self._data_set))

    """
    Class method to get the number of objects created
    """
    @classmethod
    def get_num_objects(cls):
        return cls._num_objects


def print_header():
    print("STEM Center Temperature Project")
    print("Ting-Lun Darrin Chang")


def convert_units(celsius_value):
    global current_unit

    if current_unit == 0:
        return celsius_value, "Celsius"
    elif current_unit == 1:
        return celsius_value * 9 / 5 + 32, "Fahrenheit"
    elif current_unit == 2:
        return celsius_value + 273.15, "Kelvin"


def print_menu():
    print("Main Menu")
    print("---------")
    print("1 - Process a new data file")
    print("2 - Choose units")
    print("3 - Edit room filter")
    print("4 - Show summary statistics")
    print("5 - Show temperature by date and time")
    print("6 - Show histogram of temperatures")
    print("7 - Quit")


def new_file(current_set):
    """
    Prompts user for filename and tries to load the file into a new TempDataset object, then repeats asking the user for
    a valid dataset name until it meets the length, or notifies the user if the file cannot be loaded.
    """
    filename = input("Please enter the filename: ")
    dataset = TempDataset()
    if dataset.process_file(filename):
        print(f"Loaded {dataset.get_loaded_temps()} samples")
        while True:
            dataset_name = input("Please provide a 3 to 20 character name for the dataset: ")
            if 3 <= len(dataset_name) <= 20:
                dataset.name = dataset_name
                break
            else:
                print("This does not work!")
    else:
        print("Unable to load file.")
    return dataset


def choose_units():
    global current_unit
    print(f"Current unit is {UNITS[current_unit][0]}")

    # Give a menu of available units
    print("Choose new unit:")
    for key, (unit_name, unit_symbol) in UNITS.items():
        print(f"{key}: {unit_name}")

    # Ask the user to choose a new unit
    while True:
        try:
            user_choice = int(input("Which unit? "))
            if user_choice in UNITS:
                current_unit = user_choice
                break
            else:
                print("Please choose a unit from the list")
        except ValueError:
            print("*** Please enter a number only ***")


def print_filter(sensor_list, filter_list):
    """
    Prints the list of filters and displays which sensors are currently active
    """
    for room, desc, num in sensor_list:
        status = "[ACTIVE]" if num in filter_list else ""
        print(f"{room}: {desc} {status}")


def change_filter(sensors, sensor_list, filter_list):
    """
    Changes the filter list
    """
    while True:
        print_filter(sensor_list, filter_list)
        user_input = input("Type the sensor to toggle (e.g., 4201) or x to end: ").strip()
        if user_input.lower() == 'x':
            break
        if user_input not in sensors:
            print("Invalid Sensor")
            continue
        sensor_number = sensors[user_input][1]
        if sensor_number in filter_list:
            filter_list.remove(sensor_number)
        else:
            filter_list.append(sensor_number)


def print_filter(sensor_list, filter_list):
    """
    Prints the list of filters and displays which sensors are currently active
    """
    for room, desc, num in sensor_list:
        status = "[ACTIVE]" if num in filter_list else ""
        print(f"{room}: {desc} {status}")


def print_summary_statistics(dataset, active_sensors):
    if dataset is None or dataset.get_loaded_temps() is None:
        print("Please load data file and make sure at least one sensor is active")
        return

    summary = dataset.get_summary_statistics(active_sensors)
    if summary is None:
        print("Please load data file and make sure at least one sensor is active")
        return

    min_temp, max_temp, avg_temp = summary
    min_temp, min_unit = convert_units(min_temp)
    max_temp, max_unit = convert_units(max_temp)
    avg_temp, avg_unit = convert_units(avg_temp)

    print(f"Summary statistics for {dataset.name}")
    print(f"Minimum Temperature: {min_temp:.2f} {min_unit}")
    print(f"Maximum Temperature: {max_temp:.2f} {max_unit}")
    print(f"Average Temperature: {avg_temp:.2f} {avg_unit}")


def print_temp_by_day_time(dataset, active_sensors):
    """
    Prints the temperature during the day
    """
    print("Print Temp by Day/Time Function Called\n")


def print_histogram(dataset, active_sensors):
    """
    prints the histogram for the temperature
    """
    print("Print Histogram Function Called\n")


def recursive_sort(sensor_list, key=0):
    n = len(sensor_list)
    if n <= 1:
        return sensor_list

    for i in range(n - 1):
        if sensor_list[i][key] > sensor_list[i + 1][key]:
            sensor_list[i], sensor_list[i + 1] = sensor_list[i + 1], sensor_list[i]

    return recursive_sort(sensor_list[:-1], key) + [sensor_list[-1]]


def main():
    current_set = TempDataset()

    sensors = {
        '4213': ("STEM Center", 0),
        '4201': ("Foundations Lab", 1),
        '4204': ("CS Lab", 2),
        '4218': ("Workshop Room", 3),
        '4205': ("Tiled Room", 4),
        'Out': ("Outside", 5),
    }

    sensor_list = [(room, desc, num) for room, (desc, num) in sensors.items()]
    filter_list = [num for _, (_, num) in sensors.items()]

    sensor_list = recursive_sort(sensor_list, key=0)

    print_header()

    while True:

        try:
            print_menu()
            print(current_set.get_avg_temperature_day_time(filter_list, 5, 7))  # for testing

            user_choice = int(input("\nWhat is your choice? "))

        except ValueError:
            print("*** Please enter a number only ***\n")
            continue

        if user_choice == 1:
            current_set = new_file(None)
        elif user_choice == 2:
            choose_units()
        elif user_choice == 3:
            change_filter(sensors, sensor_list, filter_list)
        elif user_choice == 4:
            print_summary_statistics(current_set, filter_list)
        elif user_choice == 5:
            print_temp_by_day_time(current_set, filter_list)
        elif user_choice == 6:
            print_histogram(current_set, filter_list)
        elif user_choice == 7:
            print("Thank you for using the STEM Center Temperature Project")
            sys.exit()
        else:
            print("Invalid Choice, please enter an integer between 1 and 7.\n")
            continue


if __name__ == "__main__":
    main()

"""
"/Users/darrin/PycharmProjects/Lab Assignment 9/.venv/bin/python" /Users/darrin/PycharmProjects/Lab Assignment 9/Lab Assignment 9/Lab Assignment 9.py 
STEM Center Temperature Project
Ting-Lun Darrin Chang
Main Menu
---------
1 - Process a new data file
2 - Choose units
3 - Edit room filter
4 - Show summary statistics
5 - Show temperature by date and time
6 - Show histogram of temperatures
7 - Quit
None

What is your choice? 4
Please load data file and make sure at least one sensor is active
Main Menu
---------
1 - Process a new data file
2 - Choose units
3 - Edit room filter
4 - Show summary statistics
5 - Show temperature by date and time
6 - Show histogram of temperatures
7 - Quit
None

What is your choice? 1
Please enter the filename: Temperatures2022-03-07.csv
Loaded 11724 samples
Please provide a 3 to 20 character name for the dataset: aaa
Main Menu
---------
1 - Process a new data file
2 - Choose units
3 - Edit room filter
4 - Show summary statistics
5 - Show temperature by date and time
6 - Show histogram of temperatures
7 - Quit
20.45544117647059

What is your choice? 4
Summary statistics for aaa
Minimum Temperature: 16.55 Celsius
Maximum Temperature: 28.42 Celsius
Average Temperature: 21.47 Celsius
Main Menu
---------
1 - Process a new data file
2 - Choose units
3 - Edit room filter
4 - Show summary statistics
5 - Show temperature by date and time
6 - Show histogram of temperatures
7 - Quit
20.45544117647059

What is your choice? 2
Current unit is Celsius
Choose new unit:
0: Celsius
1: Fahrenheit
2: Kelvin
Which unit? 1
Main Menu
---------
1 - Process a new data file
2 - Choose units
3 - Edit room filter
4 - Show summary statistics
5 - Show temperature by date and time
6 - Show histogram of temperatures
7 - Quit
20.45544117647059

What is your choice? 4
Summary statistics for aaa
Minimum Temperature: 61.79 Fahrenheit
Maximum Temperature: 83.16 Fahrenheit
Average Temperature: 70.64 Fahrenheit
Main Menu
---------
1 - Process a new data file
2 - Choose units
3 - Edit room filter
4 - Show summary statistics
5 - Show temperature by date and time
6 - Show histogram of temperatures
7 - Quit
20.45544117647059

What is your choice? 3
4201: Foundations Lab [ACTIVE]
4204: CS Lab [ACTIVE]
4205: Tiled Room [ACTIVE]
4213: STEM Center [ACTIVE]
4218: Workshop Room [ACTIVE]
Out: Outside [ACTIVE]
Type the sensor to toggle (e.g., 4201) or x to end: 4201
4201: Foundations Lab 
4204: CS Lab [ACTIVE]
4205: Tiled Room [ACTIVE]
4213: STEM Center [ACTIVE]
4218: Workshop Room [ACTIVE]
Out: Outside [ACTIVE]
Type the sensor to toggle (e.g., 4201) or x to end: 4204
4201: Foundations Lab 
4204: CS Lab 
4205: Tiled Room [ACTIVE]
4213: STEM Center [ACTIVE]
4218: Workshop Room [ACTIVE]
Out: Outside [ACTIVE]
Type the sensor to toggle (e.g., 4201) or x to end: x
Main Menu
---------
1 - Process a new data file
2 - Choose units
3 - Edit room filter
4 - Show summary statistics
5 - Show temperature by date and time
6 - Show histogram of temperatures
7 - Quit
19.910638297872342

What is your choice? 4
Summary statistics for aaa
Minimum Temperature: 61.79 Fahrenheit
Maximum Temperature: 83.16 Fahrenheit
Average Temperature: 70.13 Fahrenheit
Main Menu
---------
1 - Process a new data file
2 - Choose units
3 - Edit room filter
4 - Show summary statistics
5 - Show temperature by date and time
6 - Show histogram of temperatures
7 - Quit
19.910638297872342

What is your choice? 3
4201: Foundations Lab 
4204: CS Lab 
4205: Tiled Room [ACTIVE]
4213: STEM Center [ACTIVE]
4218: Workshop Room [ACTIVE]
Out: Outside [ACTIVE]
Type the sensor to toggle (e.g., 4201) or x to end: 4205
4201: Foundations Lab 
4204: CS Lab 
4205: Tiled Room 
4213: STEM Center [ACTIVE]
4218: Workshop Room [ACTIVE]
Out: Outside [ACTIVE]
Type the sensor to toggle (e.g., 4201) or x to end: 4213
4201: Foundations Lab 
4204: CS Lab 
4205: Tiled Room 
4213: STEM Center 
4218: Workshop Room [ACTIVE]
Out: Outside [ACTIVE]
Type the sensor to toggle (e.g., 4201) or x to end: 4218
4201: Foundations Lab 
4204: CS Lab 
4205: Tiled Room 
4213: STEM Center 
4218: Workshop Room 
Out: Outside [ACTIVE]
Type the sensor to toggle (e.g., 4201) or x to end: Out
4201: Foundations Lab 
4204: CS Lab 
4205: Tiled Room 
4213: STEM Center 
4218: Workshop Room 
Out: Outside 
Type the sensor to toggle (e.g., 4201) or x to end: x
Main Menu
---------
1 - Process a new data file
2 - Choose units
3 - Edit room filter
4 - Show summary statistics
5 - Show temperature by date and time
6 - Show histogram of temperatures
7 - Quit
None

What is your choice? 4
Please load data file and make sure at least one sensor is active
Main Menu
---------
1 - Process a new data file
2 - Choose units
3 - Edit room filter
4 - Show summary statistics
5 - Show temperature by date and time
6 - Show histogram of temperatures
7 - Quit
None

What is your choice? 7
Thank you for using the STEM Center Temperature Project

Process finished with exit code 0
"""
