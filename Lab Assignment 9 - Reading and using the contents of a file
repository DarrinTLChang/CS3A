"""
    Assignment Nine: Reading and using the contents of a file
    Submitted by Darrin Chang
    Submitted: June 9th, 2024

    Assignment 9: Implementing new instance methods for handling the data and updating
              the menu functionality to read and process large CSV file containing
              temperature readings from a STEM center.

    Assignment 8: Code is added to create a class to manage the temperature data
              in a separate file and then integrated here.

    Assignment 7: This assignment introduces two methods (in detail)
              print_filter() - prints a list of sensors that are active and inactive
              change_filter() - allows a user to activate a sensor or deactivate it
              The change_filter() is initiated through the menu prompt #3 choice.
              The change_filter() method will print the filter list showing active or
              inactive states, and it will allow the user to turn a sensor on or off.

    Assignment 6: Bubble sort a sensor list but using recursion. Use a test case
              as provided (similar to assignment 5, but with reference to the
              sensor list information from assignment 4).

    Assignment 5: A separate recursion assignment (as another project; see assignment 5)

    Assignment 4: Code is added to create a sensor list and filter list

    Assignment 3: Code is added to the program in order to create a menu of functions which the user can choose from

    Assignment 2: Additional code is added to this program in order to convert the user's input from Celsius to Celsius,
    Kelvin, or Fahrenheit

    Assignment 1: This program demonstrates printing lines of text to the screen
"""

import sys


class TempDataset:
    """
    Class variable to keep track of the number of TempDataset objects created
    """
    _num_objects = 0

    def __init__(self):
        """
        Instance variable to hold the data set
        """
        self._data_set = None
        """
        Instance variable to hold the name of the data set
        """
        self._name = "Unnamed"
        TempDataset._num_objects += 1

    # Property for the name
    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, new_name):
        if not isinstance(new_name, str) or len(new_name) < 3 or len(new_name) > 20:
            raise ValueError("Name must be a string between 3 and 20 characters.")
        self._name = new_name

    def process_file(self, filename):
        """
        The process_file method reads CSV file, extracts temperature data entries,
        converts the time of day to an integer hour, and stores the processed data in the _data_set attribute, returning
        true if successful or false if file is not found
        """
        import math
        try:
            with open(filename, "r") as file:
                lines = file.readlines()
        except FileNotFoundError:
            return False
        self._data_set = []
        for line in lines:
            data = tuple(line.split(","))
            if len(data) > 4 and data[3] == 'TEMP':
                time_of_day = math.floor(float(data[1]) * 24)
                temperature = data[4].strip()
                new_entry = (int(data[0]), time_of_day, int(data[2]), float(temperature))
                self._data_set.append(new_entry)
        return True

    def get_summary_statistics(self, filter_list):
        if self._data_set is None:
            return None
        return (0, 0, 0)

    """
    Instance method to get average temperature by day and time (stub implementation)
    """
    def get_avg_temperature_day_time(self, filter_list, day, time):
        if self._data_set is None:
            return None
        return 0

    """
    Instance method to get the number of temperature samples (stub implementation)
    """
    def get_num_temps(self, filter_list, lower_bound, upper_bound):
        if self._data_set is None:
            return None
        return 0

    def get_loaded_temps(self):
        """
        Returns the number of loaded temperature samples as an integer if the data set is loaded
        """
        if self._data_set is None:
            return None
        else:
            return int(len(self._data_set))

    """
    Class method to get the number of objects created
    """
    @classmethod
    def get_num_objects(cls):
        return cls._num_objects


def print_header():
    print("STEM Center Temperature Project")
    print("Ting-Lun Darrin Chang")


def convert_units(celsius_value, units):
    """
    completes the computation converting between the units after checking for whether unit is valid, returns
    value after
    """
    if units not in (0, 1, 2):
        return None

    if units == 0:
        return celsius_value, "Celsius"
    elif units == 1:
        return celsius_value * 9 / 5 + 32, "Fahrenheit"
    elif units == 2:
        return celsius_value + 273.15, "Kelvin"


def print_menu():
    print("Main Menu")
    print("---------")
    print("1 - Process a new data file")
    print("2 - Choose units")
    print("3 - Edit room filter")
    print("4 - Show summary statistics")
    print("5 - Show temperature by date and time")
    print("6 - Show histogram of temperatures")
    print("7 - Quit")


def new_file(current_set):
    """
    Prompts user for filename and tries to load the file into a new TempDataset object, then repeats asking the user for
    a valid dataset name until it meets the length, or notifies the user if the file cannot be loaded.
    """
    filename = input("Please enter the filename: ")
    dataset = TempDataset()
    if dataset.process_file(filename):
        print(f"Loaded {dataset.get_loaded_temps()} samples")
        while True:
            dataset_name = input("Please provide a 3 to 20 character name for the dataset: ")
            if 3 <= len(dataset_name) <= 20:
                dataset.name = dataset_name
                break
            else:
                print("This does not work!")
    else:
        print("Unable to load file.")
    return dataset


def choose_units():
    """
    Chooses unit to be converted into
    """
    print("Choose Units Function Called\n")


def print_filter(sensor_list, filter_list):
    """
    Prints the list of filters and displays which sensors are currently active
    """
    for room, desc, num in sensor_list:
        status = "[ACTIVE]" if num in filter_list else ""
        print(f"{room}: {desc} {status}")


def change_filter(sensors, sensor_list, filter_list):
    """
    Changes the filter list
    """
    while True:
        print_filter(sensor_list, filter_list)
        user_input = input("Type the sensor to toggle (e.g., 4201) or x to end: ").strip()
        if user_input.lower() == 'x':
            break
        if user_input not in sensors:
            print("Invalid Sensor")
            continue
        sensor_number = sensors[user_input][1]
        if sensor_number in filter_list:
            filter_list.remove(sensor_number)
        else:
            filter_list.append(sensor_number)


def print_filter(sensor_list, filter_list):
    """
    Prints the list of filters and displays which sensors are currently active
    """
    for room, desc, num in sensor_list:
        status = "[ACTIVE]" if num in filter_list else ""
        print(f"{room}: {desc} {status}")


def print_summary_statistics(dataset, active_sensors):
    """
    prints the summary statistics
    """
    print("Summary Statistics Function Called\n")


def print_temp_by_day_time(dataset, active_sensors):
    """
    Prints the temperature during the day
    """
    print("Print Temp by Day/Time Function Called\n")


def print_histogram(dataset, active_sensors):
    """
    prints the histogram for the temperature
    """
    print("Print Histogram Function Called\n")


def recursive_sort(sensor_list, key=0):
    n = len(sensor_list)
    if n <= 1:
        return sensor_list

    for i in range(n - 1):
        if sensor_list[i][key] > sensor_list[i + 1][key]:
            sensor_list[i], sensor_list[i + 1] = sensor_list[i + 1], sensor_list[i]

    return recursive_sort(sensor_list[:-1], key) + [sensor_list[-1]]


def main():
    """
    prints the test results, prints the header, then displays the menu prompting for user input, calling the individual
    function each time based on input, looping until user inputs 7 to quit. Displaying error messages explaining error
    """

    current_set = TempDataset()

    sensors = {
        '4213': ("STEM Center", 0),
        '4201': ("Foundations Lab", 1),
        '4204': ("CS Lab", 2),
        '4218': ("Workshop Room", 3),  # Room 4218 is the Workshop Room with sensor number 3
        '4205': ("Tiled Room", 4),
        'Out': ("Outside", 5),
    }

    sensor_list = [(room, desc, num) for room, (desc, num) in sensors.items()]
    filter_list = [num for _, (_, num) in sensors.items()]

    sensor_list = recursive_sort(sensor_list, key=0)

    print_header()

    if current_set._data_set is not None:
        print([current_set._data_set[k] for k in range(0, 5000, 1000)])

    while True:
        try:
            print_menu()
            user_choice = int(input("\nWhat is your choice? "))

        except ValueError:
            print("*** Please enter a number only ***\n")
            continue

        if user_choice == 1:
            new_file(None)
        elif user_choice == 2:
            choose_units()
        elif user_choice == 3:
            change_filter(sensors, sensor_list, filter_list)
        elif user_choice == 4:
            print_summary_statistics(None, None)
        elif user_choice == 5:
            print_temp_by_day_time(None, None)
        elif user_choice == 6:
            print_histogram(None, None)
        elif user_choice == 7:
            print("Thank you for using the STEM Center Temperature Project")
            sys.exit()
        else:
            print("Invalid Choice, please enter an integer between 1 and 7.\n")
            continue


if __name__ == "__main__":
    main()

"""
"/Users/darrin/PycharmProjects/Lab Assignment 9/.venv/bin/python" /Users/darrin/PycharmProjects/Lab Assignment 9/Lab Assignment 9/Lab Assignment 9.py 
STEM Center Temperature Project
Ting-Lun Darrin Chang
Main Menu
---------
1 - Process a new data file
2 - Choose units
3 - Edit room filter
4 - Show summary statistics
5 - Show temperature by date and time
6 - Show histogram of temperatures
7 - Quit

What is your choice? 1
Please enter the filename: Temperatures2022-03-07.csv
Loaded 11724 samples
Please provide a 3 to 20 character name for the dataset: 
This does not work!
Please provide a 3 to 20 character name for the dataset: hello
Main Menu
---------
1 - Process a new data file
2 - Choose units
3 - Edit room filter
4 - Show summary statistics
5 - Show temperature by date and time
6 - Show histogram of temperatures
7 - Quit

What is your choice? 
"""
